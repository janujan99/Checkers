[{"/Users/janujansritharan/Projects/Checkers-React/checkers/src/index.tsx":"1","/Users/janujansritharan/Projects/Checkers-React/checkers/src/reportWebVitals.ts":"2","/Users/janujansritharan/Projects/Checkers-React/checkers/src/App.tsx":"3","/Users/janujansritharan/Projects/Checkers-React/checkers/src/board.tsx":"4"},{"size":500,"mtime":1643648182663,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1643648182664,"results":"7","hashOfConfig":"6"},{"size":190,"mtime":1643648993015,"results":"8","hashOfConfig":"6"},{"size":6793,"mtime":1643691241155,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1lj55nv",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/janujansritharan/Projects/Checkers-React/checkers/src/index.tsx",[],[],["24","25"],"/Users/janujansritharan/Projects/Checkers-React/checkers/src/reportWebVitals.ts",[],[],"/Users/janujansritharan/Projects/Checkers-React/checkers/src/App.tsx",[],[],"/Users/janujansritharan/Projects/Checkers-React/checkers/src/board.tsx",["26","27","28","29","30","31","32"],[],"import React, { useState } from \"react\";\nimport \"./Square.css\";\nimport \"./Board.css\";\n\nfunction Square(props: any) {\n  return (\n    <div className=\"square\" onClick={props.onClick}>\n      {props.ch}\n    </div>\n  );\n}\n\nenum Colour {\n  Red = 1,\n  Black = 2,\n}\n\ninterface Checker {\n  colour: Colour;\n  x: number;\n  y: number;\n  hasPromoted: boolean;\n}\n\nexport function Board() {\n  const [redsTurn, setTurn] = useState(true);\n  const [validPieceSelected, setValidPieceSelected] = useState(false);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [board, setBoard] = useState([\n    [\n      null,\n      { colour: Colour.Black, x: 1, y: 0, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 3, y: 0, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 5, y: 0, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 7, y: 0, hasPromoted: false },\n    ],\n    [\n      { colour: Colour.Black, x: 0, y: 1, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 2, y: 1, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 4, y: 1, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 6, y: 1, hasPromoted: false },\n      null,\n    ],\n    [\n      null,\n      { colour: Colour.Black, x: 1, y: 2, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 3, y: 2, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 5, y: 2, hasPromoted: false },\n      null,\n      { colour: Colour.Black, x: 7, y: 2, hasPromoted: false },\n    ],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [\n      { colour: Colour.Red, x: 0, y: 5, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 2, y: 5, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 4, y: 5, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 6, y: 5, hasPromoted: false },\n      null,\n    ],\n    [\n      null,\n      { colour: Colour.Red, x: 1, y: 6, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 3, y: 6, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 5, y: 6, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 7, y: 6, hasPromoted: false },\n    ],\n    [\n      { colour: Colour.Red, x: 0, y: 7, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 2, y: 7, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 4, y: 7, hasPromoted: false },\n      null,\n      { colour: Colour.Red, x: 6, y: 7, hasPromoted: false },\n      null,\n    ],\n  ]);\n  const [displayBoard, setDisplayBoard] = useState(makeDisplayBoard());\n\n  function isValidCoordinate(coordinate: number[]) {\n    return (\n      coordinate[0] >= 0 &&\n      coordinate[0] < 8 &&\n      coordinate[1] >= 0 &&\n      coordinate[1] < 8\n    );\n  }\n\n  function getMoves(x: number, y: number) {\n    console.log(\"Before: \" + validPieceSelected);\n    let validPiece: boolean = board[y][x] != nul;\n    l &&\n      ((board[y][x]!.colour === Colour.Red && redsTurn) ||\n        (board[y][x]!.colour === Colour.Black && !redsTurn));\n    console.log(\"Actual: \" + validPiece);\n    setValidPieceSelected(validPiece);\n    console.log(\"After: \" + validPieceSelected);\n    if (validPieceSelected)\n      displayMoves(getNonCaptureMoves(x, y).concat(getCaptureMoves(x, y)));\n  }\n\n  function getNonCaptureMoves(x: number, y: number) {\n    let moves: number[][];\n    let directionFactor: number = board[y][x]!.colour === Colour.Red ? -1 : 1;\n    //get possible move locations\n    if (board[y][x]!.hasPromoted)\n      moves = [\n        [x + 1, y + 1],\n        [x - 1, y + 1],\n        [x + 1, y - 1],\n        [x - 1, y - 1],\n      ];\n    else\n      moves = [\n        [x + 1, y + directionFactor],\n        [x - 1, y + directionFactor],\n      ];\n\n    let filteredMoves: number[][] = [];\n    for (let i = 0; i < moves.length; i++) {\n      if (\n        isValidCoordinate(moves[i]) &&\n        board[moves[i][1]][moves[i][0]] == null\n      ) {\n        filteredMoves.push(moves[i]);\n      }\n    }\n    return filteredMoves;\n  }\n\n  function getCaptureMoves(x: number, y: number) {\n    let moves: number[][];\n    let directionFactor: number = board[y][x]!.colour === Colour.Red ? -1 : 1;\n\n    if (board[y][x]!.hasPromoted) {\n      moves = [\n        [x + 2, y + 2],\n        [x - 2, y + 2],\n        [x + 2, y - 2],\n        [x - 2, y - 2],\n      ];\n    } else {\n      moves = [\n        [x + 2, y + 2 * directionFactor],\n        [x - 2, y + 2 * directionFactor],\n      ];\n    }\n\n    let filtered_moves: number[][] = [];\n\n    for (let i = 0; i < moves.length; i++) {\n      let move_x: number = moves[i][0];\n      let move_y: number = moves[i][1];\n\n      if (\n        isValidCoordinate(moves[i]) &&\n        board[move_y][move_x] == null &&\n        board[(move_y + y) / 2][(move_x + x) / 2] != null &&\n        board[(move_y + y) / 2][(move_x + x) / 2]?.colour !==\n          board[y][x]!.colour\n      ) {\n        filtered_moves.push(moves[i]);\n      }\n    }\n    return filtered_moves;\n  }\n\n  function makeDisplayBoard() {\n    let tempBoard: (string | null)[][] = [];\n    for (let i = 0; i < 8; i++) {\n      let temp: (string | null)[] = [];\n      for (let j = 0; j < 8; j++) {\n        if (!board[i][j]) temp.push(null);\n        else {\n          if (board[i][j]!.colour === Colour.Red) {\n            if (board[i][j]!.hasPromoted) temp.push(\"R\");\n            else temp.push(\"r\");\n          } else {\n            if (board[i][j]!.hasPromoted) temp.push(\"B\");\n            else temp.push(\"b\");\n          }\n        }\n      }\n      tempBoard.push(temp);\n    }\n    return tempBoard;\n  }\n\n  function displayMoves(moves: number[][]) {\n    let tempBoard: (string | null)[][] = [];\n\n    for (let i = 0; i < 8; i++) {\n      let temp = [];\n      for (let j = 0; j < 8; j++) {\n        temp.push(displayBoard[i][j]);\n      }\n      tempBoard.push(temp);\n    }\n    // clear board of existing moves that are displayed\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        if (tempBoard[i][j]! === \".\") tempBoard[i][j] = null;\n      }\n    }\n    // place marker on squares where valid piece can move\n    for (let i = 0; i < moves.length; i++)\n      tempBoard[moves[i][1]][moves[i][0]] = \".\";\n\n    setDisplayBoard(tempBoard);\n    console.log(tempBoard);\n  }\n\n  console.log(\"Render!\");\n  let bigboard = [];\n  for (let i = 0; i < 8; i++) {\n    let temp = [];\n    for (let j = 0; j < 8; j++) {\n      let val: string = String(i) + String(j);\n      temp.push(\n        <Square\n          key={val}\n          ch={displayBoard[i][j]}\n          onClick={() => getMoves(j, i)}\n        />\n      );\n    }\n    bigboard.push(\n      <div key={i} className=\"row\">\n        {temp}\n      </div>\n    );\n  }\n  return <div className=\"bigboard\">{bigboard}</div>;\n}\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":18,"column":11,"nodeType":"39","messageId":"40","endLine":18,"endColumn":18},{"ruleId":"37","severity":1,"message":"41","line":26,"column":20,"nodeType":"39","messageId":"40","endLine":26,"endColumn":27},{"ruleId":"37","severity":1,"message":"42","line":28,"column":10,"nodeType":"39","messageId":"40","endLine":28,"endColumn":23},{"ruleId":"37","severity":1,"message":"43","line":28,"column":25,"nodeType":"39","messageId":"40","endLine":28,"endColumn":41},{"ruleId":"37","severity":1,"message":"44","line":29,"column":17,"nodeType":"39","messageId":"40","endLine":29,"endColumn":25},{"ruleId":"45","severity":1,"message":"46","line":106,"column":43,"nodeType":"47","messageId":"48","endLine":106,"endColumn":45},{"ruleId":"49","severity":2,"message":"50","line":107,"column":5,"nodeType":"51","messageId":"52","endLine":109,"endColumn":62},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'Checker' is defined but never used.","Identifier","unusedVar","'setTurn' is assigned a value but never used.","'selectedPiece' is assigned a value but never used.","'setSelectedPiece' is assigned a value but never used.","'setBoard' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-global-assign","no-unsafe-negation"]