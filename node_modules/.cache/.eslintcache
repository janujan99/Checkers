[{"/Users/janujansritharan/Projects/Checkers-React/src/index.tsx":"1","/Users/janujansritharan/Projects/Checkers-React/src/reportWebVitals.ts":"2","/Users/janujansritharan/Projects/Checkers-React/src/App.tsx":"3","/Users/janujansritharan/Projects/Checkers-React/src/board.tsx":"4","/Users/janujansritharan/Projects/Checkers-React/src/checkersState.ts":"5"},{"size":500,"mtime":1643946849312,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1643946849316,"results":"8","hashOfConfig":"7"},{"size":204,"mtime":1645377244806,"results":"9","hashOfConfig":"7"},{"size":3411,"mtime":1645403298830,"results":"10","hashOfConfig":"7"},{"size":11674,"mtime":1645377610295,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8bqqe3",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/janujansritharan/Projects/Checkers-React/src/index.tsx",[],[],"/Users/janujansritharan/Projects/Checkers-React/src/reportWebVitals.ts",[],[],"/Users/janujansritharan/Projects/Checkers-React/src/App.tsx",[],[],["29","30"],"/Users/janujansritharan/Projects/Checkers-React/src/board.tsx",["31","32"],[],"import React, { useState } from \"react\";\nimport \"./Square.css\";\nimport \"./Board.css\";\nimport \"./checkersState\";\nimport {\n  Colour,\n  TurnType,\n  Turn,\n  Board,\n  Position,\n  Checker,\n  newState,\n  CheckersState,\n  isValidCoordinate,\n  isValidPiece,\n  getCaptureMoves,\n  getNonCaptureMoves,\n  makeMove,\n} from \"./checkersState\";\n\nfunction Square(props: any) {\n  return (\n    <div className=\"square\" onClick={props.onClick}>\n      {props.ch}\n    </div>\n  );\n}\n\nexport function CheckerBoard() {\n  const [checkersState, setCheckersState] = useState({\n    gameState: newState(),\n    currentPieceClicked: { x: -1, y: -1 },\n    currentMovesDisplayed: [{ x: -1, y: -1 }],\n  });\n\n  function getNewCheckersState(i: number, j: number) {\n    let board: Board = checkersState.gameState.board;\n    let turn: Turn = checkersState.gameState.turn;\n    let square: Checker | null = board.grid[i][j];\n    if (\n      square === null &&\n      checkersState.currentMovesDisplayed.some(\n        (move) => move.x === j && move.y === i\n      )\n    ) {\n      let newGameState: CheckersState = makeMove(\n        checkersState.currentPieceClicked,\n        { x: j, y: i },\n        checkersState.gameState\n      );\n      if (newGameState.turnType === TurnType.Continue) {\n        setCheckersState({\n          gameState: newGameState,\n          currentPieceClicked: newGameState.currentPieceLocation,\n          currentMovesDisplayed: getCaptureMoves(\n            newGameState.board.grid[newGameState.currentPieceLocation.y][\n              newGameState.currentPieceLocation.x\n            ]!,\n            newGameState.board\n          ),\n        });\n      } else {\n        setCheckersState({\n          gameState: makeMove(\n            checkersState.currentPieceClicked,\n            { x: j, y: i },\n            checkersState.gameState\n          ),\n          currentPieceClicked: { x: -1, y: -1 },\n          currentMovesDisplayed: [{ x: -1, y: -1 }],\n        });\n      }\n    } else if (\n      square != null &&\n      ((square.colour === Colour.Red && turn === Turn.RedTurn) ||\n        (square.colour === Colour.Black && turn === Turn.BlackTurn)) &&\n      checkersState.gameState.turnType === TurnType.Next\n    ) {\n      let allMoves: Position[] = getCaptureMoves(square, board).concat(\n        getNonCaptureMoves(square, board)\n      );\n      setCheckersState({\n        gameState: checkersState.gameState,\n        currentPieceClicked: square.position,\n        currentMovesDisplayed: allMoves,\n      });\n    }\n  }\n  console.log(\"Render!\");\n  console.log(checkersState);\n  let bigboard = [];\n  for (let i = 0; i < 8; i++) {\n    let temp = [];\n    for (let j = 0; j < 8; j++) {\n      let square: Checker | null = checkersState.gameState.board.grid[i][j];\n      let chr: string | null = null;\n      if (square !== null) {\n        let col: string = square!.colour === Colour.Red ? \"r\" : \"b\";\n        chr = square!.hasPromoted ? col.toUpperCase() : col;\n      } else {\n        if (\n          checkersState.currentMovesDisplayed.some(\n            (move) => move.x === j && move.y === i\n          )\n        )\n          chr = \".\";\n      }\n      temp.push(\n        <Square\n          key={String(i) + String(j)}\n          ch={chr}\n          onClick={() => getNewCheckersState(i, j)}\n        />\n      );\n    }\n    bigboard.push(\n      <div key={i} className=\"row\">\n        {temp}\n      </div>\n    );\n  }\n  return <div className=\"bigboard\">{bigboard}</div>;\n}\n","/Users/janujansritharan/Projects/Checkers-React/src/checkersState.ts",["33","34","35"],[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":14,"column":3,"nodeType":"42","messageId":"43","endLine":14,"endColumn":20},{"ruleId":"40","severity":1,"message":"44","line":15,"column":3,"nodeType":"42","messageId":"43","endLine":15,"endColumn":15},{"ruleId":"45","severity":1,"message":"46","line":155,"column":37,"nodeType":"47","messageId":"48","endLine":155,"endColumn":39},{"ruleId":"40","severity":1,"message":"49","line":179,"column":10,"nodeType":"42","messageId":"43","endLine":179,"endColumn":20},{"ruleId":"40","severity":1,"message":"50","line":184,"column":11,"nodeType":"42","messageId":"43","endLine":184,"endColumn":21},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'isValidCoordinate' is defined but never used.","Identifier","unusedVar","'isValidPiece' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'printBoard' is defined but never used.","'ch' is defined but never used.","no-global-assign","no-unsafe-negation"]