{"ast":null,"code":"var _jsxFileName = \"/Users/janujansritharan/Projects/Checkers-React/src/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Square.css\";\nimport \"./Board.css\";\nimport \"./checkersState\";\nimport { Colour, Turn, newState, getCaptureMoves, getNonCaptureMoves } from \"./checkersState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.ch\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\nexport function CheckerBoard() {\n  _s();\n\n  const [checkersState, setCheckersState] = useState({\n    gameState: newState(),\n    currentPieceClicked: {\n      x: -1,\n      y: -1\n    },\n    currentMovesDisplayed: [{\n      x: -1,\n      y: -1\n    }]\n  });\n\n  function getNewCheckersState(i, j) {\n    let board = checkersState.gameState.board;\n    let turn = checkersState.gameState.turn;\n    let square = board.grid[i][j];\n\n    if (square != null && (square.colour === Colour.Red && turn === Turn.RedTurn || square.colour === Colour.Black && turn === Turn.BlackTurn)) {\n      let allMoves = getCaptureMoves(square, board).concat(getNonCaptureMoves(square, board));\n      setCheckersState({\n        gameState: checkersState.gameState,\n        currentPieceClicked: square.position,\n        currentMovesDisplayed: allMoves\n      });\n    }\n  }\n\n  console.log(\"Render!\");\n  let bigboard = [];\n\n  for (let i = 0; i < 8; i++) {\n    let temp = [];\n\n    for (let j = 0; j < 8; j++) {\n      let square = checkersState.gameState.board.grid[i][j];\n      let chr = null;\n\n      if (square !== null) {\n        let col = square.colour === Colour.Red ? \"r\" : \"b\";\n        chr = square.hasPromoted ? col.toUpperCase() : col;\n      } else {\n        if (checkersState.currentMovesDisplayed.includes({\n          x: j,\n          y: i\n        })) chr = \".\";\n      }\n\n      let val = String(i) + String(j);\n      temp.push( /*#__PURE__*/_jsxDEV(Square, {\n        ch: chr,\n        onClick: () => getNewCheckersState(i, j)\n      }, val, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this));\n    }\n\n    bigboard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: temp\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bigboard\",\n    children: bigboard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CheckerBoard, \"8yUK21sEosfeCXdwGNVusAbLEGE=\");\n\n_c2 = CheckerBoard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"CheckerBoard\");","map":{"version":3,"sources":["/Users/janujansritharan/Projects/Checkers-React/src/board.tsx"],"names":["React","useState","Colour","Turn","newState","getCaptureMoves","getNonCaptureMoves","Square","props","onClick","ch","CheckerBoard","checkersState","setCheckersState","gameState","currentPieceClicked","x","y","currentMovesDisplayed","getNewCheckersState","i","j","board","turn","square","grid","colour","Red","RedTurn","Black","BlackTurn","allMoves","concat","position","console","log","bigboard","temp","chr","col","hasPromoted","toUpperCase","includes","val","String","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Square.css\";\nimport \"./Board.css\";\nimport \"./checkersState\";\nimport {\n  Colour,\n  TurnType,\n  Turn,\n  Board,\n  Position,\n  Checker,\n  newState,\n  CheckersState,\n  isValidCoordinate,\n  isValidPiece,\n  getCaptureMoves,\n  getNonCaptureMoves,\n} from \"./checkersState\";\n\nfunction Square(props: any) {\n  return (\n    <div className=\"square\" onClick={props.onClick}>\n      {props.ch}\n    </div>\n  );\n}\n\nexport function CheckerBoard() {\n  const [checkersState, setCheckersState] = useState({\n    gameState: newState(),\n    currentPieceClicked: { x: -1, y: -1 },\n    currentMovesDisplayed: [{ x: -1, y: -1 }],\n  });\n\n  function getNewCheckersState(i: number, j: number) {\n    let board: Board = checkersState.gameState.board;\n    let turn: Turn = checkersState.gameState.turn;\n    let square: Checker | null = board.grid[i][j];\n    if (\n      square != null &&\n      ((square.colour === Colour.Red && turn === Turn.RedTurn) ||\n        (square.colour === Colour.Black && turn === Turn.BlackTurn))\n    ) {\n      let allMoves: Position[] = getCaptureMoves(square, board).concat(\n        getNonCaptureMoves(square, board)\n      );\n      setCheckersState({\n        gameState: checkersState.gameState,\n        currentPieceClicked: square.position,\n        currentMovesDisplayed: allMoves,\n      });\n    }\n  }\n  console.log(\"Render!\");\n  let bigboard = [];\n  for (let i = 0; i < 8; i++) {\n    let temp = [];\n    for (let j = 0; j < 8; j++) {\n      let square: Checker | null = checkersState.gameState.board.grid[i][j];\n      let chr: string | null = null;\n      if (square !== null) {\n        let col: string = square!.colour === Colour.Red ? \"r\" : \"b\";\n        chr = square!.hasPromoted ? col.toUpperCase() : col;\n      } else {\n        if (checkersState.currentMovesDisplayed.includes({ x: j, y: i }))\n          chr = \".\";\n      }\n      let val: string = String(i) + String(j);\n      temp.push(\n        <Square key={val} ch={chr} onClick={() => getNewCheckersState(i, j)} />\n      );\n    }\n    bigboard.push(\n      <div key={i} className=\"row\">\n        {temp}\n      </div>\n    );\n  }\n  return <div className=\"bigboard\">{bigboard}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}