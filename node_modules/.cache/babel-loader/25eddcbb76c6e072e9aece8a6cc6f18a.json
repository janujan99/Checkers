{"ast":null,"code":"var _jsxFileName = \"/Users/janujansritharan/Projects/Checkers-React/src/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Square.css\";\nimport \"./Board.css\";\nimport \"./checkersState\";\nimport { Colour, TurnType, Turn, newState, getCaptureMoves, getNonCaptureMoves, makeMove, gameOver } from \"./checkersState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  let n = \"null-crown\";\n  let crown_char = \"\";\n  if (props.ch === null) n = \"null_circle\";else {\n    if (props.ch === \".\") n = \"move_circle\";else if (props.ch.toLowerCase() === \"r\") {\n      n = \"red_circle\";\n      if (props.ch === props.ch.toUpperCase()) crown_char = \"black-crown\";\n    } else {\n      n = \"black_circle\";\n      if (props.ch === props.ch.toUpperCase()) crown_char = \"white-crown\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.name,\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: n,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crown-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: crown_char\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\nexport function CheckerBoard() {\n  _s();\n\n  const [checkersState, setCheckersState] = useState({\n    gameState: newState(),\n    currentPieceClicked: {\n      x: -1,\n      y: -1\n    },\n    currentMovesDisplayed: [{\n      x: -1,\n      y: -1\n    }]\n  });\n\n  function getNewCheckersState(i, j) {\n    let reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (reset) {\n      setCheckersState({\n        gameState: newState(),\n        currentPieceClicked: {\n          x: -1,\n          y: -1\n        },\n        currentMovesDisplayed: [{\n          x: -1,\n          y: -1\n        }]\n      });\n      return;\n    }\n\n    let board = checkersState.gameState.board;\n    let turn = checkersState.gameState.turn;\n    let square = board.grid[i][j];\n\n    if (square === null && checkersState.currentMovesDisplayed.some(move => move.x === j && move.y === i)) {\n      let newGameState = makeMove(checkersState.currentPieceClicked, {\n        x: j,\n        y: i\n      }, checkersState.gameState);\n\n      if (newGameState.turnType === TurnType.Continue) {\n        setCheckersState({\n          gameState: newGameState,\n          currentPieceClicked: newGameState.currentPieceLocation,\n          currentMovesDisplayed: getCaptureMoves(newGameState.board.grid[newGameState.currentPieceLocation.y][newGameState.currentPieceLocation.x], newGameState.board)\n        });\n      } else {\n        setCheckersState({\n          gameState: makeMove(checkersState.currentPieceClicked, {\n            x: j,\n            y: i\n          }, checkersState.gameState),\n          currentPieceClicked: {\n            x: -1,\n            y: -1\n          },\n          currentMovesDisplayed: [{\n            x: -1,\n            y: -1\n          }]\n        });\n      }\n    } else if (square != null && (square.colour === Colour.Red && turn === Turn.RedTurn || square.colour === Colour.Black && turn === Turn.BlackTurn) && checkersState.gameState.turnType === TurnType.Next) {\n      let allMoves = getCaptureMoves(square, board).concat(getNonCaptureMoves(square, board));\n      setCheckersState({\n        gameState: checkersState.gameState,\n        currentPieceClicked: square.position,\n        currentMovesDisplayed: allMoves\n      });\n    }\n  }\n\n  let bigboard = [];\n\n  for (let i = 0; i < 8; i++) {\n    let temp = [];\n\n    for (let j = 0; j < 8; j++) {\n      let square = checkersState.gameState.board.grid[i][j];\n      let chr = null;\n\n      if (square !== null) {\n        let col = square.colour === Colour.Red ? \"r\" : \"b\";\n        chr = square.hasPromoted ? col.toUpperCase() : col;\n      } else {\n        if (checkersState.currentMovesDisplayed.some(move => move.x === j && move.y === i)) chr = \".\";\n      }\n\n      let name = (i + j) % 2 === 0 ? \"square even\" : \"square odd\";\n      temp.push( /*#__PURE__*/_jsxDEV(Square, {\n        name: name,\n        ch: chr,\n        onClick: () => getNewCheckersState(i, j)\n      }, String(i) + String(j), false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this));\n    }\n\n    bigboard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: temp\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this));\n  }\n\n  let titleText = \"CHECKERS\";\n\n  if (gameOver(checkersState.gameState)) {\n    titleText = checkersState.gameState.turn === Turn.RedTurn ? \"Black wins!\" : \"Red wins!\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: titleText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bigboard\",\n      children: bigboard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getNewCheckersState(-1, -1, true),\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckerBoard, \"8yUK21sEosfeCXdwGNVusAbLEGE=\");\n\n_c2 = CheckerBoard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"CheckerBoard\");","map":{"version":3,"sources":["/Users/janujansritharan/Projects/Checkers-React/src/board.tsx"],"names":["React","useState","Colour","TurnType","Turn","newState","getCaptureMoves","getNonCaptureMoves","makeMove","gameOver","Square","props","n","crown_char","ch","toLowerCase","toUpperCase","name","onClick","CheckerBoard","checkersState","setCheckersState","gameState","currentPieceClicked","x","y","currentMovesDisplayed","getNewCheckersState","i","j","reset","board","turn","square","grid","some","move","newGameState","turnType","Continue","currentPieceLocation","colour","Red","RedTurn","Black","BlackTurn","Next","allMoves","concat","position","bigboard","temp","chr","col","hasPromoted","push","String","titleText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Square.css\";\nimport \"./Board.css\";\nimport \"./checkersState\";\nimport {\n  Colour,\n  TurnType,\n  Turn,\n  Board,\n  Position,\n  Checker,\n  newState,\n  CheckersState,\n  getCaptureMoves,\n  getNonCaptureMoves,\n  makeMove,\n  gameOver,\n} from \"./checkersState\";\n\nfunction Square(props: any) {\n  let n: string = \"null-crown\";\n  let crown_char: string = \"\";\n  if (props.ch === null) n = \"null_circle\";\n  else {\n    if (props.ch === \".\") n = \"move_circle\";\n    else if (props.ch.toLowerCase() === \"r\") {\n      n = \"red_circle\";\n      if (props.ch === props.ch.toUpperCase()) crown_char = \"black-crown\";\n    } else {\n      n = \"black_circle\";\n      if (props.ch === props.ch.toUpperCase()) crown_char = \"white-crown\";\n    }\n  }\n  return (\n    <div className={props.name} onClick={props.onClick}>\n      <div className={n}>\n        <div className=\"crown-container\">\n          <div className={crown_char}></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function CheckerBoard() {\n  const [checkersState, setCheckersState] = useState({\n    gameState: newState(),\n    currentPieceClicked: { x: -1, y: -1 },\n    currentMovesDisplayed: [{ x: -1, y: -1 }],\n  });\n\n  function getNewCheckersState(i: number, j: number, reset: boolean = false) {\n    if (reset) {\n      setCheckersState({\n        gameState: newState(),\n        currentPieceClicked: { x: -1, y: -1 },\n        currentMovesDisplayed: [{ x: -1, y: -1 }],\n      });\n      return;\n    }\n    let board: Board = checkersState.gameState.board;\n    let turn: Turn = checkersState.gameState.turn;\n    let square: Checker | null = board.grid[i][j];\n    if (\n      square === null &&\n      checkersState.currentMovesDisplayed.some(\n        (move) => move.x === j && move.y === i\n      )\n    ) {\n      let newGameState: CheckersState = makeMove(\n        checkersState.currentPieceClicked,\n        { x: j, y: i },\n        checkersState.gameState\n      );\n      if (newGameState.turnType === TurnType.Continue) {\n        setCheckersState({\n          gameState: newGameState,\n          currentPieceClicked: newGameState.currentPieceLocation,\n          currentMovesDisplayed: getCaptureMoves(\n            newGameState.board.grid[newGameState.currentPieceLocation.y][\n              newGameState.currentPieceLocation.x\n            ]!,\n            newGameState.board\n          ),\n        });\n      } else {\n        setCheckersState({\n          gameState: makeMove(\n            checkersState.currentPieceClicked,\n            { x: j, y: i },\n            checkersState.gameState\n          ),\n          currentPieceClicked: { x: -1, y: -1 },\n          currentMovesDisplayed: [{ x: -1, y: -1 }],\n        });\n      }\n    } else if (\n      square != null &&\n      ((square.colour === Colour.Red && turn === Turn.RedTurn) ||\n        (square.colour === Colour.Black && turn === Turn.BlackTurn)) &&\n      checkersState.gameState.turnType === TurnType.Next\n    ) {\n      let allMoves: Position[] = getCaptureMoves(square, board).concat(\n        getNonCaptureMoves(square, board)\n      );\n      setCheckersState({\n        gameState: checkersState.gameState,\n        currentPieceClicked: square.position,\n        currentMovesDisplayed: allMoves,\n      });\n    }\n  }\n\n  let bigboard = [];\n  for (let i = 0; i < 8; i++) {\n    let temp = [];\n    for (let j = 0; j < 8; j++) {\n      let square: Checker | null = checkersState.gameState.board.grid[i][j];\n      let chr: string | null = null;\n      if (square !== null) {\n        let col: string = square!.colour === Colour.Red ? \"r\" : \"b\";\n        chr = square!.hasPromoted ? col.toUpperCase() : col;\n      } else {\n        if (\n          checkersState.currentMovesDisplayed.some(\n            (move) => move.x === j && move.y === i\n          )\n        )\n          chr = \".\";\n      }\n      let name: string = (i + j) % 2 === 0 ? \"square even\" : \"square odd\";\n      temp.push(\n        <Square\n          name={name}\n          key={String(i) + String(j)}\n          ch={chr}\n          onClick={() => getNewCheckersState(i, j)}\n        />\n      );\n    }\n    bigboard.push(\n      <div key={i} className=\"row\">\n        {temp}\n      </div>\n    );\n  }\n  let titleText: string = \"CHECKERS\";\n  if (gameOver(checkersState.gameState)) {\n    titleText =\n      checkersState.gameState.turn === Turn.RedTurn\n        ? \"Black wins!\"\n        : \"Red wins!\";\n  }\n  return (\n    <div>\n      <div className=\"title\">{titleText}</div>\n      <div className=\"bigboard\">{bigboard}</div>\n      <div className=\"button-container\">\n        <button onClick={() => getNewCheckersState(-1, -1, true)}>\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}